{"version":3,"sources":["withRoot.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","light","purple","main","dark","secondary","green","typography","useNextVariants","withRoot","Component","props","react_default","a","createElement","styles","CssBaseline_default","MINT_ENDPOINT","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setWindowWeb3","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","window","ethereum","web3","Web3","enable","t0","console","log","currentProvider","alert","stop","getCusd","abi","require","eth","Contract","updateUserBalance","_ref2","_callee2","user","cusd","balance","short_balance","_context2","utils","isAddress","methods","balanceOf","sent","fromWei","toString","setState","balance_cusd","abrupt","_x","apply","arguments","signMessage","dataToSign","from","Promise","resolve","reject","personal","sign","err","signature","getUserFromSignature","_ref3","_callee3","message","_context3","accounts","recover","_x2","_x3","componentDidMount","_callee4","intervalId","_context4","setInterval","timer","_callee5","_context5","state","user_address","componentWillUnmount","clearInterval","handleClick_Balance","_callee6","_context6","handleClick_Mint","_callee7","amountToMint","to","post_data","minter_status","response","pending_hash","_context7","toWei","amount_to_mint","amount","minting","axios","get","minter_balance","post","data","pendingMint","concat","handleClick_Login","_callee8","messageToSign","sig","signer","_context8","signing_in","getAccounts","error","handleChange","name","event","defineProperty","target","value","etherscan","style","height","width","alt","src","user_short","substring","classes","className","root","AppBar_default","position","Toolbar_default","Typography_default","variant","color","grow","role","aria-label","Button_default","onClick","disabled","Paper_default","paper","elevation","href","rel","length","map","i","key","withStyles","flexGrow","textAlign","paddingTop","spacing","unit","paddingBottom","marginTop","marginBottom","marginLeft","marginRight","menuButton","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3391ba7.chunk.js","sourcesContent":["import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: purple[300],\n      main: purple[500],\n      dark: purple[700],\n    },\n    secondary: {\n      light: green[300],\n      main: green[500],\n      dark: green[700],\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // MuiThemeProvider makes the theme available down the React tree\n    // thanks to React context.\n    return (\n      <MuiThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Component {...props} />\n      </MuiThemeProvider>\n    );\n  }\n\n  return WithRoot;\n}\n\nexport default withRoot;","import React, { Component } from 'react';\nimport './App.css';\nimport withRoot from './withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\n// WEB3 Services\nimport Web3 from 'web3';\n\n// Config\nimport config from './config';\nimport path from 'path';\n\n// REST API server\nimport axios from 'axios'\nconst MINT_ENDPOINT = \"https://cusd-faucet-server-ropsten.herokuapp.com/api/faucet/minter\"\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  main: {\n    textAlign: 'center',\n    paddingTop: theme.spacing.unit * 5,\n  },\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 20,\n    marginRight: theme.spacing.unit * 20,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user_address: '',\n      signing_in: false,\n      amount_to_mint: \"10.3141\",\n      minting: false,\n      pendingMint: [],\n      balance_cusd: '',\n    };\n  }\n\n  /** WEB3 RELATED SERVICE FUNCTIONS */\n  \n  // Detect or set window.web3 ethereum connection\n  setWindowWeb3 = async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        try {\n            // Request account access if needed\n            await window.ethereum.enable();\n        } catch (error) {\n            // User denied account access...\n            console.log('user denied ethereum account access')\n        }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n    }\n    // Non-dapp browsers...\n    else {\n        alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  // Fetch active CUSD instance\n  getCusd = () => {\n    let web3 = window.web3\n    // Contract ABI's\n    const ABI = require(\"./contracts/MetaToken.json\");\n\n    // Contract Ropsten Addresses\n    const ADDRESS = \"0x67450c8908e2701abfa6745be3949ad32acf42d8\";\n\n    var jsonFile = ABI;\n    var abi = jsonFile.abi;\n    var deployedAddress = ADDRESS;\n    const instance = new web3.eth.Contract(abi, deployedAddress);\n    return instance;\n  }\n\n  // Refresh user CUSD balance\n  updateUserBalance = async (user) => {\n    if (window.web3 && user) {\n      let cusd = this.getCusd()\n      if (window.web3.utils.isAddress(user)) {\n        let balance = await cusd.methods.balanceOf(user).call()\n        let short_balance = window.web3.utils.fromWei(balance.toString(), 'ether')\n        this.setState({\n          balance_cusd: short_balance\n        })\n        return short_balance\n      } else {\n        return -1\n      }\n    } else {\n      return -1\n    }\n  }\n\n  // Request user to cryptographically sign a message\n  signMessage = (dataToSign, from) => {\n    return new Promise((resolve, reject) =>\n      window.web3.eth.personal.sign(\n        dataToSign,\n        from,\n        (err, signature) => {\n          if (err) return reject(err);\n          return resolve(signature);\n        }\n      )\n    );\n  };\n\n  // Get user who signed a message\n  getUserFromSignature = async (\n      message,\n      signature\n  ) => {\n      let user = await window.web3.eth.accounts.recover(\n        message, signature\n      )\n      return user\n  }\n\n  /** CONTINUOUS TIMER BEGINNING AT MOUNT */\n  componentDidMount = async () => {\n    // Request user's web3 connection\n    await this.setWindowWeb3() \n\n    var intervalId = setInterval(this.timer, 1000);\n    // store intervalId in the state so it can be accessed later:\n    this.setState({intervalId: intervalId});\n  }\n\n  // @dev Put anything that you want to continually compute here\n  timer = async () => {\n    // Update signMessageuser balance\n    await this.updateUserBalance(this.state.user_address)\n  }\n\n  componentWillUnmount = () => {\n    // use intervalId from the state to clear the interval\n    clearInterval(this.state.intervalId);\n  }\n  \n  /** BUTTON CLICK HANDLERS */\n\n  // Refresh user balance in state\n  handleClick_Balance = async () => {\n    if (this.state.user_address) {\n      await this.updateUserBalance(this.state.user_address)\n    } else {\n      return\n    }\n  }\n\n  // Mint new CUSD to user\n  handleClick_Mint = async () => {\n    if (window.web3) {\n      let web3 = window.web3\n      let amountToMint = web3.utils.toWei(this.state.amount_to_mint, 'ether')\n  \n      let to = this.state.user_address\n      if (!web3.utils.isAddress(to)) {\n        console.log('invalid user address: ', to)\n        return\n      }\n\n      let post_data = {\n        amount: amountToMint.toString(),\n        user: to\n      }\n\n      this.setState({\n        minting: true\n      })\n\n      try {\n        // TODO: Each pending mint should have a Number:mint_id, and a status: pending, failed, success\n        let minter_status = await axios.get(\n          MINT_ENDPOINT\n        )\n        let minter_balance = minter_status.minter_balance\n        if (minter_balance <= 0) {\n          alert('Minter does not have enough eth to mint :(')\n          this.setState({\n            minting: false\n          })\n        }\n        let response = await axios.post(\n          MINT_ENDPOINT,\n          post_data\n        );\n\n        console.log(response)\n\n        let pending_hash = response.data.pending_hash\n        this.setState({\n          pendingMint: this.state.pendingMint.concat([pending_hash]),\n          minting: false\n        })\n      } catch (err) {\n        this.setState({\n          minting: false\n        })\n      }\n    }\n  }\n\n  // Ask user to authenticate their keypair\n  handleClick_Login = async () => {\n    this.setState({\n      signing_in: true\n    })\n    \n    if ( window.web3 ) {\n      let web3 = window.web3\n\n      try {\n        let accounts = await web3.eth.getAccounts()\n        let user = accounts[0]\n\n        let messageToSign = \"Welcome to the Carbon CUSD faucet! Please sign this message to verify that you are who you say you are, and we'll mint you \" \n                            + this.state.amount_to_mint \n                            + \" CUSD.\"\n        let sig = await this.signMessage(messageToSign, user)\n        let signer = await this.getUserFromSignature(\n          messageToSign,\n          sig\n        )\n        this.setState({\n          user_address: signer,\n          signing_in: false\n        })\n      } catch (err) {\n        console.error('user could not sign message')\n        this.setState({\n          signing_in: false\n        })\n      }\n    } else {\n      // No web3 injected\n      alert('Cannot connect to Ethereum, are you using a dapp-enabled browser?')\n      this.setState({\n        signing_in: false\n      })\n      return\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n  \n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render() {\n\n    const etherscan = (\n      <img\n        style={{ height: \"20px\", width: \"auto\" }}\n        alt=\"Etherscan\"\n        src=\"https://db5islsn2p9x4.cloudfront.net/etherscan.png\"\n      />\n    );\n\n    const user_short = this.state.user_address ? this.state.user_address.substring(0, 8) : \"\" \n\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            {/* <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n              <MenuIcon />\n            </IconButton> */}\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n              Ropsten Faucet <span role=\"img\" aria-label=\"Sake\">🍶</span>\n            </Typography>\n            {/* REQUEST USER SIGNATURE */}\n            <Button\n              onClick={this.handleClick_Login}\n              disabled={this.state.signing_in}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Sign In to Ethereum\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <div className={classes.main}>\n          {/* USER IDENTITY  */}\n          <Paper className={classes.paper} elevation={3}>\n            <Typography> \n              You are connected to Ethereum as: \n                  {this.state.user_address ? (<a\n                    href={\"https://ropsten.etherscan.io/address/\" + this.state.user_address}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {user_short}...\n                  </a>) : (\"\")}\n            </Typography>\n          </Paper>\n          {/* MINT */}\n          <Paper className={classes.paper} elevation={3}>\n            {/* MINT NEW CUSD  */}\n              { !this.state.user_address ?\n              (\n                <Button disabled>Please sign in get CUSD!</Button>\n              )\n              : (\n                <Button\n                  onClick={this.handleClick_Mint}\n                  disabled={this.state.minting}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Mint me {this.state.amount_to_mint} CUSD\n                </Button>\n              )\n              }\n            {/* MINT TXNS  */}\n            { this.state.pendingMint.length > 0 ? (\n            <div>\n              <Typography> \n                Your mint transactions: \n              </Typography>\n              {this.state.pendingMint.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  {etherscan} ({i}): \n                  <a\n                    href={\"https://ropsten.etherscan.io/tx/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on Etherscan\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n          </Paper>\n          {/* USER BALANCES  */}\n          <Paper className={classes.paper} elevation={3}>\n            <Button\n              onClick={this.handleClick_Balance}\n              disabled={!this.state.user_address}\n              color=\"secondary\"\n              variant=\"contained\">\n              Refresh Balance\n            </Button>\n            <Typography> \n              Your CUSD balance: {this.state.balance_cusd}\n            </Typography>\n          </Paper>\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(withStyles(styles)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}