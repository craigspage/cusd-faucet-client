{"version":3,"sources":["withRoot.js","services/getCUSD.js","services/signMessage.js","services/sendCUSD.js","services/burnCUSD.js","services/updateUserBalance.js","services/recoverMessageSigner.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","light","purple","main","dark","secondary","green","typography","useNextVariants","withRoot","Component","props","react_default","a","createElement","styles","CssBaseline_default","getCUSD","web3","abi","require","eth","Contract","signMessage","dataToSign","from","Promise","resolve","reject","personal","sign","err","signature","sendCUSD","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","to","amount","_web3$utils","cusd","crafted_transaction","nonce","metatoken","reward","metaTx","hash","sig","post_data","wrap","_context","prev","next","isNaN","utils","isAddress","console","error","abrupt","methods","transfer","replayNonce","call","sent","options","address","t0","Math","estimateGas","t1","t2","ceil","toTwosComplement","soliditySha3","apply","type","transferRecipient","signerNonce","t3","stop","this","_x","_x2","_x3","_x4","arguments","burnCUSD","stablecoin","burnCarbonDollar","updateUserBalance","user","balance","short_balance","balanceOf","fromWei","toString","recoverMessageSigner","message","window","accounts","recover","SERVER","MINTER_ENDPOINT","RELAYER_ENDPOINT","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","setWindowWeb3","ethereum","Web3","enable","log","currentProvider","alert","_updateUserBalance","_ref2","_callee2","_context2","setState","balance_cusd","componentDidMount","_callee3","intervalId","_context3","setInterval","timer","_callee4","_context4","state","user_address","componentWillUnmount","clearInterval","handleClick_Mint","_callee5","amountToMint","minter_status","response","pending_hash","_context5","toWei","amount_to_mint","minting","axios","get","minter_balance","post","data","pendingMint","concat","handleClick_Login","_callee6","messageToSign","signer","_context6","signing_in","getAccounts","handleClick_Transfer","_callee7","amountToTransfer","relayer_status","_context7","amount_to_transfer","transfer_to","transferring","balance_relayer","pendingTransfer","handleClick_Burn","_callee8","amountToBurn","_context8","amount_to_burn","burning","pendingBurn","handleChange","name","event","defineProperty","target","value","updating_balance","etherscan","style","height","width","alt","src","user_short","substring","classes","className","root","AppBar_default","position","Toolbar_default","Typography_default","variant","color","grow","role","aria-label","Button_default","onClick","disabled","Paper_default","paper","elevation","href","rel","length","map","i","key","TextField_default","id","label","textField","onChange","margin","withStyles","flexGrow","textAlign","paddingTop","spacing","unit","paddingBottom","marginTop","marginBottom","marginLeft","marginRight","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70f2570b.chunk.js","sourcesContent":["import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\nimport green from '@material-ui/core/colors/green';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: purple[300],\n      main: purple[500],\n      dark: purple[700],\n    },\n    secondary: {\n      light: green[300],\n      main: green[500],\n      dark: green[700],\n    },\n  },\n  typography: {\n    useNextVariants: true,\n  },\n});\n\nfunction withRoot(Component) {\n  function WithRoot(props) {\n    // MuiThemeProvider makes the theme available down the React tree\n    // thanks to React context.\n    return (\n      <MuiThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Component {...props} />\n      </MuiThemeProvider>\n    );\n  }\n\n  return WithRoot;\n}\n\nexport default withRoot;","// Fetch active CUSD instance\nexport const getCUSD = (web3) => {\n    if (!web3) return;\n    // Contract ABI's\n    const ABI = require(\"../contracts/MetaToken.json\");\n\n    // Contract Ropsten Addresses\n    const ADDRESS = \"0x67450c8908e2701abfa6745be3949ad32acf42d8\";\n\n    var jsonFile = ABI;\n    var abi = jsonFile.abi;\n    var deployedAddress = ADDRESS;\n    const instance = new web3.eth.Contract(abi, deployedAddress);\n    return instance;\n}","// Request user to cryptographically sign a message\nexport const signMessage = (web3, dataToSign, from) => {\n    if (!web3) return;\n    return new Promise((resolve, reject) =>\n      web3.eth.personal.sign(\n        dataToSign,\n        from,\n        (err, signature) => {\n          if (err) return reject(err);\n          return resolve(signature);\n        }\n      )\n    );\n  };","import { getCUSD } from './getCUSD'\nimport { signMessage } from './signMessage'\n\n// Send amount of CUSD from user to another user\nexport const sendCUSD = async function(web3, from, to, amount) {\n  if (\n    !web3 ||\n    !from ||\n    !to ||\n    !amount ||\n    isNaN(amount) ||\n    amount <= 0 ||\n    !web3.utils.isAddress(from) ||\n    !web3.utils.isAddress(to)\n  ) {\n    console.error(\"invalid parameters passed\");\n    return;\n  }\n\n  try {\n    let cusd = getCUSD(web3);\n\n    let crafted_transaction = cusd.methods.transfer(to, amount);\n    let nonce = await cusd.methods.replayNonce(from).call();\n    let metatoken = cusd.options.address;\n    let reward = Math.ceil(\n      (await crafted_transaction.estimateGas({\n        from,\n      })) * 2.5\n    );\n\n    // Hash must be in this format: keccak256(abi.encodePacked(address(MetaToken),\"metaTransfer\", _to, _amount, _nonce, _reward));\n    // @devs: cast all signed ints to unsigned ints via web3.utils.toTwosComplement()\n    let metaTx = [\n      metatoken,\n      \"metaTransfer\",\n      to,\n      amount,\n      web3.utils.toTwosComplement(nonce),\n      web3.utils.toTwosComplement(reward)\n    ];\n\n    let hash = web3.utils.soliditySha3(...metaTx);\n    let sig = await signMessage(web3, hash, from);\n\n    var post_data = {\n      type: 'transfer',\n      transferRecipient: to,\n      amount,\n      sig,\n      signerNonce: nonce,\n      reward,\n    };\n\n    return post_data\n\n  } catch (err) {\n    throw err;\n  }\n};","import { getCUSD } from './getCUSD'\nimport { signMessage } from './signMessage'\n\nconst WT0_ADDRESS = \"0xcd36463470c4b92700b4d5fbe270e680d9d48968\";\n\n// Burn amount of CUSD from user \nexport const burnCUSD = async function(web3, from, amount) {\n  if (\n    !web3 ||\n    !from ||\n    !amount ||\n    isNaN(amount) ||\n    amount <= 0 ||\n    !web3.utils.isAddress(from) \n  ) {\n    console.error(\"invalid parameters passed\");\n    return;\n  }\n\n  try {\n    let cusd = getCUSD(web3);\n    let stablecoin = WT0_ADDRESS\n    let crafted_transaction = cusd.methods.burnCarbonDollar(stablecoin, amount);\n    let nonce = await cusd.methods.replayNonce(from).call();\n    let metatoken = cusd.options.address;\n    let reward = Math.ceil(\n      (await crafted_transaction.estimateGas({\n        from,\n      })) * 2.5\n    );\n\n    // Hash must be in this format: keccak256(abi.encodePacked(address(MetaToken),\"metaTransfer\", _to, _amount, _nonce, _reward));\n    // @devs: cast all signed ints to unsigned ints via web3.utils.toTwosComplement()\n    let metaTx = [\n      metatoken,\n      \"metaBurnCarbonDollar\",\n      stablecoin,\n      amount,\n      web3.utils.toTwosComplement(nonce),\n      web3.utils.toTwosComplement(reward)\n    ];\n\n    let hash = web3.utils.soliditySha3(...metaTx);\n    let sig = await signMessage(web3, hash, from);\n\n    var post_data = {\n      type: 'burn',\n      stablecoin,\n      amount,\n      sig,\n      signerNonce: nonce,\n      reward,\n    };\n\n    return post_data\n\n  } catch (err) {\n    throw err;\n  }\n};","import { getCUSD } from './getCUSD'\n\n// Refresh user CUSD balance\nexport const updateUserBalance = async (web3, user) => {\n    if (web3 && user) {\n      let cusd = getCUSD(web3)\n      if (web3.utils.isAddress(user)) {\n        let balance = await cusd.methods.balanceOf(user).call()\n        let short_balance = web3.utils.fromWei(balance.toString(), 'ether')\n        return short_balance\n      } else {\n        return -1\n      }\n    } else {\n      return -1\n    }\n  }","  // Get user who signed a message\n  export const recoverMessageSigner = async (\n      web3,\n      message,\n      signature\n  ) => {\n      if (!web3) return;\n      let user = await window.web3.eth.accounts.recover(\n        message, signature\n      )\n      return user\n  }","import React, { Component } from 'react';\nimport './App.css';\nimport withRoot from './withRoot';\nimport PropTypes from 'prop-types';\n\n// Material-ui\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TextField from '@material-ui/core/TextField'\n\n// WEB3 Services\nimport Web3 from 'web3';\nimport { sendCUSD } from './services/sendCUSD'\nimport { burnCUSD } from './services/burnCUSD'\nimport { updateUserBalance } from './services/updateUserBalance'\nimport { signMessage } from './services/signMessage'\nimport { recoverMessageSigner } from './services/recoverMessageSigner'\n\n// REST API server\nimport axios from 'axios'\n// const SERVER= 'http://localhost:5000/'\nconst SERVER = \"https://cusd-faucet-server-ropsten.herokuapp.com/\"\nconst MINTER_ENDPOINT = SERVER+\"api/faucet/minter\"\nconst RELAYER_ENDPOINT = SERVER+\"api/faucet/relayer\"\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  main: {\n    textAlign: 'center',\n    paddingTop: theme.spacing.unit * 5,\n  },\n  paper: {\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 1,\n    marginLeft: theme.spacing.unit * 5,\n    marginRight: theme.spacing.unit * 5,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  },\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user_address: '',\n      signing_in: false,\n      amount_to_mint: \"10.3141\",\n      minting: false,\n      pendingMint: [],\n      balance_cusd: '',\n      updating_balance: false,\n      transferring: false,\n      pendingTransfer: [],\n      amount_to_transfer: '',\n      transfer_to: '',\n      burning: false,\n      pendingBurn: [],\n      amount_to_burn: ''\n    };\n  }\n\n  /** WEB3 RELATED SERVICE FUNCTIONS */\n  \n  // Detect or set window.web3 ethereum connection\n  setWindowWeb3 = async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        try {\n            // Request account access if needed\n            await window.ethereum.enable();\n        } catch (error) {\n            // User denied account access...\n            console.log('user denied ethereum account access')\n        }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n    }\n    // Non-dapp browsers...\n    else {\n        alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  // Refresh user CUSD balance\n  _updateUserBalance = async (web3, user) => {\n    if (!web3 || !user) return;\n    let short_balance = await updateUserBalance(web3, user)\n    if (short_balance >= 0 ) {\n      this.setState({\n        balance_cusd: short_balance\n      })\n    }\n  }\n\n  /** CONTINUOUS TIMER BEGINNING AT MOUNT */\n  componentDidMount = async () => {\n    // Request user's web3 connection\n    await this.setWindowWeb3() \n\n    var intervalId = setInterval(this.timer, 1000);\n    // store intervalId in the state so it can be accessed later:\n    this.setState({intervalId: intervalId});\n  }\n\n  // @dev Put anything that you want to continually compute here\n  timer = async () => {\n    // Update user balance\n    await this._updateUserBalance(window.web3, this.state.user_address)\n  }\n\n  componentWillUnmount = () => {\n    // use intervalId from the state to clear the interval\n    clearInterval(this.state.intervalId);\n  }\n  \n  /** BUTTON CLICK HANDLERS */\n\n  // Mint new CUSD to user\n  handleClick_Mint = async () => {\n    if (window.web3) {\n      let web3 = window.web3\n      let amountToMint = web3.utils.toWei(this.state.amount_to_mint, 'ether')\n  \n      let to = this.state.user_address\n      if (!web3.utils.isAddress(to)) {\n        console.log('invalid user address: ', to)\n        return\n      }\n\n      let post_data = {\n        amount: amountToMint.toString(),\n        user: to\n      }\n\n      this.setState({\n        minting: true\n      })\n\n      try {\n        // TODO: Each pending mint should have a Number:mint_id, and a status: pending, failed, success\n        let minter_status = await axios.get(\n          MINTER_ENDPOINT\n        )\n        let minter_balance = minter_status.minter_balance\n        if (minter_balance <= 0) {\n          alert('Minter does not have enough eth to mint :(')\n          this.setState({\n            minting: false\n          })\n        }\n        let response = await axios.post(\n          MINTER_ENDPOINT,\n          post_data\n        );\n\n        let pending_hash = response.data.pending_hash\n        this.setState({\n          pendingMint: this.state.pendingMint.concat([pending_hash]),\n          minting: false\n        })\n      } catch (err) {\n        this.setState({\n          minting: false\n        })\n      }\n    }\n  }\n\n  // Ask user to authenticate their keypair\n  handleClick_Login = async () => {\n    this.setState({\n      signing_in: true\n    })\n    \n    if ( window.web3 ) {\n      let web3 = window.web3\n\n      try {\n        let accounts = await web3.eth.getAccounts()\n        let user = accounts[0]\n\n        let messageToSign = \"Welcome to the Carbon CUSD faucet! Please sign this message to verify that you are who you say you are, and we'll mint you \" \n                            + this.state.amount_to_mint \n                            + \" CUSD.\"\n        let sig = await signMessage(window.web3, messageToSign, user)\n        let signer = await recoverMessageSigner(\n          window.web3,\n          messageToSign,\n          sig\n        )\n        this.setState({\n          user_address: signer,\n          signing_in: false\n        })\n      } catch (err) {\n        console.error('user could not sign message')\n        this.setState({\n          signing_in: false\n        })\n      }\n    } else {\n      // No web3 injected\n      alert('Cannot connect to Ethereum, are you using a dapp-enabled browser?')\n      this.setState({\n        signing_in: false\n      })\n      return\n    }\n  }\n\n  // Transfer CUSD to another user\n  handleClick_Transfer = async () => {\n    if (window.web3) {\n      let web3 = window.web3\n      let amountToTransfer = web3.utils.toWei(this.state.amount_to_transfer, 'ether')\n  \n      let from = this.state.user_address\n      let to = this.state.transfer_to\n      if (!web3.utils.isAddress(to)) {\n        console.log('invalid user address: (to) ', to)\n        return\n      }\n      if (!web3.utils.isAddress(from)) {\n        console.log('invalid user address: (from) ', from)\n        return\n      }\n\n      this.setState({\n        transferring: true\n      })\n\n      try {\n        // TODO: Each pending transfer should have a Number:transfer_id, and a status: pending, failed, success\n        let relayer_status = await axios.get(\n          RELAYER_ENDPOINT\n        )\n        let relayer_balance = relayer_status.balance_relayer\n        if (relayer_balance <= 0) {\n          alert('Relayer does not have enough eth to forward metatransfer :(')\n          this.setState({\n            minting: false\n          })\n        }\n\n        alert('Please sign the transfer metatransaction, and we will pay for your ETH gas fees to send CUSD!')\n        let post_data = await sendCUSD(web3, from, to, amountToTransfer)\n        // console.log('metatransfer: ', post_data)\n\n        let response = await axios.post(\n          RELAYER_ENDPOINT,\n          post_data\n        );\n\n        let pending_hash = response.data.hash\n        this.setState({\n          pendingTransfer: this.state.pendingTransfer.concat([pending_hash]),\n          transferring: false\n        })\n      } catch (err) {\n        this.setState({\n          transferring: false\n        })\n      }\n    }\n  }\n\n  // Redeem CUSD by burning\n  handleClick_Burn = async () => {\n    if (window.web3) {\n      let web3 = window.web3\n      let amountToBurn = web3.utils.toWei(this.state.amount_to_burn, 'ether')\n  \n      let from = this.state.user_address\n      if (!web3.utils.isAddress(from)) {\n        console.log('invalid user address: (from) ', from)\n        return\n      }\n\n      this.setState({\n        burning: true\n      })\n\n      try {\n        // TODO: Each pending burn should have a Number:burn_id, and a status: pending, failed, success\n        let relayer_status = await axios.get(\n          RELAYER_ENDPOINT\n        )\n        let relayer_balance = relayer_status.balance_relayer\n        if (relayer_balance <= 0) {\n          alert('Relayer does not have enough eth to forward metatransfer :(')\n          this.setState({\n            burning: false\n          })\n        }\n\n        alert('Please sign the burn metatransaction, and we will pay for your ETH gas fees to redeem CUSD!')\n        let post_data = await burnCUSD(web3, from, amountToBurn)\n\n        let response = await axios.post(\n          RELAYER_ENDPOINT,\n          post_data\n        );\n        \n        let pending_hash = response.data.hash\n        this.setState({\n          pendingBurn: this.state.pendingBurn.concat([pending_hash]),\n          burning: false\n        })\n\n      } catch (err) {\n        this.setState({\n          burning: false\n        })\n      }\n    }\n  }\n\n  /** END BUTTON CLICK HANDLERS */\n\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  render() {\n\n    const etherscan = (\n      <img\n        style={{ height: \"20px\", width: \"auto\" }}\n        alt=\"Etherscan\"\n        src=\"https://db5islsn2p9x4.cloudfront.net/etherscan.png\"\n      />\n    );\n\n    const user_short = this.state.user_address ? this.state.user_address.substring(0, 8) : \"\" \n\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n              Ropsten Faucet <span role=\"img\" aria-label=\"Sake\">🍶</span>\n            </Typography>\n            {/* REQUEST USER SIGNATURE */}\n            <Button\n              onClick={this.handleClick_Login}\n              disabled={this.state.signing_in}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Sign In to Ethereum\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <div className={classes.main}>\n          {/* USER IDENTITY  */}\n          <Paper className={classes.paper} elevation={3}>\n            <Typography> \n              You are connected to Ethereum as: \n                  {this.state.user_address ? (<a\n                    href={\"https://ropsten.etherscan.io/address/\" + this.state.user_address}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {user_short}...\n                  </a>) : (\"\")}\n            </Typography>\n          </Paper>\n          {/* MINT */}\n          <Paper className={classes.paper} elevation={3}>\n            {/* MINT NEW CUSD  */}\n              { !this.state.user_address ?\n              (\n                <Button disabled>Please sign in get CUSD!</Button>\n              )\n              : (\n                <Button\n                  onClick={this.handleClick_Mint}\n                  disabled={this.state.minting}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Mint me {this.state.amount_to_mint} CUSD\n                </Button>\n              )\n              }\n            {/* MINT TXNS  */}\n            { this.state.pendingMint.length > 0 ? (\n            <div>\n              <Typography> \n                Your mint transactions: \n              </Typography>\n              {this.state.pendingMint.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  {etherscan} ({i}): \n                  <a\n                    href={\"https://ropsten.etherscan.io/tx/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on Etherscan\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n          </Paper>\n          {/* USER BALANCES  */}\n          <Paper className={classes.paper} elevation={3}>\n            <Typography> \n              Your CUSD balance: {this.state.balance_cusd}\n            </Typography>\n          </Paper>\n          {/* TRANSFER */}\n          <Paper className={classes.paper} elevation={3}>\n            {/* TRANSFER CUSD  */}\n              { !this.state.user_address ?\n              (\n                <Button disabled>Please sign in trade CUSD!</Button>\n              )\n              : (\n                <div>\n                <form>\n                  <TextField\n                    id=\"transfer-to\"\n                    label=\"Transfer To\"\n                    className={classes.textField}\n                    value={this.state.transfer_to}\n                    onChange={this.handleChange('transfer_to')}\n                    margin=\"normal\"\n                  />\n                  <TextField\n                    id=\"transfer-amount\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    className={classes.textField}\n                    value={this.state.amount_to_transfer}\n                    onChange={this.handleChange('amount_to_transfer')}\n                    margin=\"normal\"\n                  />\n                </form>\n                <Button\n                  onClick={this.handleClick_Transfer}\n                  disabled={\n                    this.state.transferring ||\n                    !this.state.transfer_to ||\n                    isNaN(this.state.amount_to_transfer) ||\n                    this.state.amount_to_transfer <= 0\n                  }\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Transfer {this.state.amount_to_transfer ? this.state.amount_to_transfer : \"\"} CUSD\n                </Button>\n                </div>\n              )\n              }\n            {/* TRANSFER TXNS  */}\n            { this.state.pendingTransfer.length > 0 ? (\n            <div>\n              <Typography> \n                Your transfer transactions: \n              </Typography>\n              {this.state.pendingTransfer.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  {etherscan} ({i}): \n                  <a\n                    href={\"https://ropsten.etherscan.io/tx/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on Etherscan\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n          </Paper>\n          {/* BURN */}\n          <Paper className={classes.paper} elevation={3}>\n            {/* BURN CUSD  */}\n              { !this.state.user_address ?\n              (\n                <Button disabled>Please sign in redeem CUSD!</Button>\n              )\n              : (\n                <div>\n                <form>\n                  <TextField\n                    id=\"burn-amount\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    className={classes.textField}\n                    value={this.state.amount_to_burn}\n                    onChange={this.handleChange('amount_to_burn')}\n                    margin=\"normal\"\n                  />\n                </form>\n                <Button\n                  onClick={this.handleClick_Burn}\n                  disabled={\n                    this.state.burning ||\n                    isNaN(this.state.amount_to_burn) ||\n                    this.state.amount_to_burn <= 0\n                  }\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Redeem {this.state.amount_to_burn ? this.state.amount_to_burn : \"\"} CUSD\n                </Button>\n                </div>\n              )\n              }\n            {/* BURN TXNS  */}\n            { this.state.pendingBurn.length > 0 ? (\n            <div>\n              <Typography> \n                Your burn transactions: \n              </Typography>\n              {this.state.pendingBurn.map((pending_hash, i) => {\n                return (<Typography key={i}> \n                  {etherscan} ({i}): \n                  <a\n                    href={\"https://ropsten.etherscan.io/tx/\" + pending_hash}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {\" track on Etherscan\"}\n                  </a>\n                </Typography>)\n              })}\n            </div> ) : (\"\")}\n          </Paper>\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withRoot(withStyles(styles)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}